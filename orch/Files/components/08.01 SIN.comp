<?xml version='1.0' encoding='UTF-8'?>
<purity-config xmlns:comm="http://www.ataccama.com/purity/comment" xmlns:def="http://www.ataccama.com/purity/defaults" version="15.4.0.241010-368-484083b9">
	<references/>
	<component-mappings>
		<propertyMappings>
			<property name="inputFileName" insert="false" mappedTo="inputFile/fileName">
				<def:default-value/>
			</property>
			<property name="outputFileName" insert="false" mappedTo="Cleansed SIN/fileName">
				<def:default-value>
					<fileName>../data/out/08.01 SIN_cleansed.csv</fileName>
				</def:default-value>
			</property>
			<property name="omitOutputInvalidSIN" insert="false" mappedTo="Social Insurance Number/omitInvalidSIN">
				<def:default-value>
					<omitInvalidSIN>false</omitInvalidSIN>
				</def:default-value>
			</property>
		</propertyMappings>
	</component-mappings>

<!-- (Cleansed SIN) --><step mode="NORMAL" className="com.ataccama.dqc.tasks.io.text.write.TextFileWriter" disabled="false" id="Cleansed SIN">
		<properties writeHeader="true" fileName="../data/out/08.01 SIN_cleansed.csv" fieldSeparator=";" generateMetadata="true" stringQualifierEscape="&quot;" writeAllColumns="false" compression="NONE" encoding="UTF-8" lineSeparator="\r\n" stringQualifier="&quot;" useStringQualifierOnAllColumns="false">
			<columns>
				<textWriterColumn name="src_sin"/>
				<textWriterColumn name="std_sin"/>
				<textWriterColumn name="exp_sin"/>
				<textWriterColumn name="sco_sin"/>
			</columns>
			<dataFormatParameters falseValue="false" dateTimeFormat="yyyy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yyyy-MM-dd" trueValue="true" dateFormatLocale="en_US" thousandsSeparator=""/>
		</properties>
		<visual-constraints layout="vertical" bounds="48,312,-1,-1"/>
	</step>



<!-- (Create pur values) --><step mode="NORMAL" className="com.ataccama.dqc.tasks.expressions.ColumnAssigner" disabled="false" id="Create pur values">
		<properties>
			<assignments>
				<assignment column="pur_sin">
					<expression>src_sin
</expression>
					<scorer>
						<scoringEntries>
							<scoringEntry explain="false" score="0" explainAs="CA_CHANGED" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>Initial assigment. We do not use scoring here.
Scoring is used only if the column was changed from its original value. In this case, as the pur_sin was empty, the score would be present in all cases except empty src_sin.</comm:comment>
				</assignment>
				<assignment column="pur_sin">
					<expression>trashNonDigits(pur_sin)
</expression>
					<scorer scoreColumn="sco_sin" explanationColumn="exp_sin">
						<scoringEntries>
							<scoringEntry explain="true" score="10" explainAs="SIN_EXTRACHAR" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>Removing all non digit characters. 
As we assign from pur_sin to pur_sin, the scoring will be used only if some non digit characters were removed. Look at scoring node - we use &quot;SIN_EXTRACHAR&quot;.</comm:comment>
				</assignment>
				<assignment column="pur_sin">
					<expression>iif( 
	length(trashNonDigits(pur_sin)) &gt; 0
	AND	
	length(trashNonDigits(pur_sin) ) &lt; 9
	AND 
	not matches(@&quot;[0]\{1,}&quot;, trashNonDigits(pur_sin))
	,
		substr(&#39;00000000&#39; + pur_sin, -9),
		pur_sin
	)</expression>
					<scorer scoreColumn="sco_sin" explanationColumn="exp_sin">
						<scoringEntries>
							<scoringEntry explain="true" score="10" explainAs="SIN_EXTENDED_BY_ZEROS" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>If the source sin number is shorter than 9 digits but contains at least 1 digit, it is extended by zero characters from the left. 
The reason is that missing leading zero character might be removed in the source system or transformation. This example does not repair any kind of dummy or null values.</comm:comment>
				</assignment>
			</assignments>
		</properties>
		<visual-constraints layout="vertical" bounds="48,168,-1,-1"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source endpoint="out" step="Create pur values"/>
		<target endpoint="in" step="Social Insurance Number"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Social Insurance Number) --><step mode="NORMAL" className="com.ataccama.dqc.tasks.clean.ca.SINValidatorAlgorithm" disabled="false" id="Social Insurance Number">
		<properties omitInvalidSIN="false" sin="pur_sin" sinOut="std_sin" preserveInputValue="false">
			<scorer scoreColumn="sco_sin" explanationColumn="exp_sin">
				<scoringEntries>
					<scoringEntry explain="true" score="10000" explainAs="SIN_MISSING" key="SV_SIN_MISSING"/>
					<scoringEntry explain="true" score="10000" explainAs="SIN_INVALID_LENGTH" key="SV_INVALID_LENGTH"/>
					<scoringEntry explain="true" score="10000" explainAs="SIN_INVALID_CHECK" key="SV_INVALID_CHECK"/>
				</scoringEntries>
			</scorer>
			<comm:comment>Canadian Social Insurance Number is validated by using the Luhn Algorithm. For more details see documentation of this step.</comm:comment>
		</properties>
		<visual-constraints layout="vertical" bounds="48,240,-1,-1"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source endpoint="out" step="Social Insurance Number"/>
		<target endpoint="in" step="Cleansed SIN"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (inputFile) --><step mode="NORMAL" className="com.ataccama.dqc.tasks.io.text.read.TextFileReader" disabled="false" id="inputFile">
		<properties lineMaxReadLength="65536" fieldSeparator=";" stringQualifierEscape="&quot;" numberOfLinesInFooter="0" compression="NONE" encoding="UTF-8" lineSeparator="\r\n" stringQualifier="&quot;" numberOfLinesInHeader="1">
			<columns>
				<textReaderColumn name="src_name" ignore="true" type="STRING"/>
				<textReaderColumn name="src_gender" ignore="true" type="STRING"/>
				<textReaderColumn name="src_birth_date" ignore="true" type="STRING"/>
				<textReaderColumn name="src_sin" ignore="false" type="STRING"/>
				<textReaderColumn name="src_card" ignore="true" type="STRING"/>
				<textReaderColumn name="src_address" ignore="true" type="STRING"/>
				<textReaderColumn name="src_email" ignore="true" type="STRING"/>
				<textReaderColumn name="src_primary_key" ignore="true" type="STRING"/>
				<textReaderColumn name="meta_last_update" ignore="true" type="STRING"/>
			</columns>
			<dataFormatParameters falseValue="false" dateTimeFormat="yy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yy-MM-dd" trueValue="true" dateFormatLocale="en_US" thousandsSeparator=""/>
			<errorHandlingStrategy rejectFileName="rejected.txt">
				<errorInstructions>
					<errorInstruction dataStrategy="READ_POSSIBLE" errorType="EXTRA_DATA" putToLog="true" putToReject="false"/>
					<errorInstruction dataStrategy="STOP" errorType="LONG_LINE" putToLog="true" putToReject="true"/>
					<errorInstruction dataStrategy="STOP" errorType="PROCESSING_ERROR" putToLog="true" putToReject="false"/>
					<errorInstruction dataStrategy="READ_POSSIBLE" errorType="INVALID_DATE" putToLog="true" putToReject="false"/>
					<errorInstruction dataStrategy="READ_POSSIBLE" errorType="SHORT_LINE" putToLog="true" putToReject="true"/>
					<errorInstruction dataStrategy="NULL_VALUE" errorType="UNPARSABLE_FIELD" putToLog="true" putToReject="false"/>
				</errorInstructions>
			</errorHandlingStrategy>
			<shadowColumns>
				<shadowColumnDef name="pur_sin" type="STRING"/>
				<shadowColumnDef name="std_sin" type="STRING"/>
				<shadowColumnDef name="exp_sin" type="STRING"/>
				<shadowColumnDef name="sco_sin" type="INTEGER"/>
			</shadowColumns>
		</properties>
		<visual-constraints layout="vertical" bounds="48,96,-1,-1"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source endpoint="out" step="inputFile"/>
		<target endpoint="in" step="Create pur values"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<modelComment backgroundColor="128,255,128" borderColor="255,255,255" bounds="24,24,217,70" foregroundColor="40,0,0">Plan Goals
The goal of this plan is to perform quick cleansing of 
personal identifiers using the SIN Validator step.</modelComment>



<modelComment backgroundColor="219,219,219" borderColor="255,255,255" bounds="264,240,236,54" foregroundColor="64,0,64">This example shows cleansing of 
Canadian Social Insurance Numbers.</modelComment>



<modelComment backgroundColor="219,219,219" borderColor="255,255,255" bounds="264,312,373,35" foregroundColor="51,51,51">To parametrize the property, right-click it and select &quot;Map as Parameter&quot;.</modelComment>

</purity-config>